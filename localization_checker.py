import re
import os
import sys
import json
import argparse
from collections import OrderedDict

def get_script_directory():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—É—Ç—å –∫ –ø–∞–ø–∫–µ, –≥–¥–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è —Å–∫—Ä–∏–ø—Ç"""
    return os.path.dirname(os.path.abspath(sys.argv[0]))

def clean_path(path):
    """–£–¥–∞–ª—è–µ—Ç 'Robast' –∏–∑ –ø—É—Ç–∏"""
    return re.sub(r'Robast', '', path)

def load_checklist(file_path):
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å –∏–∑ —Ñ–∞–π–ª–∞"""
    if os.path.exists(file_path):
        try:
            with open(file_path, 'r', encoding='utf-8') as f:
                return json.load(f)
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞: {e}")
            return {}
    return {}

def save_checklist(file_path, checklist):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å –≤ —Ñ–∞–π–ª"""
    try:
        with open(file_path, 'w', encoding='utf-8') as f:
            json.dump(checklist, f, ensure_ascii=False, indent=2)
        return True
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞: {e}")
        return False

def parse_keys(file_path):
    """–ë—ã—Å—Ç—Ä—ã–π –ø–∞—Ä—Å–∏–Ω–≥ —Ñ–∞–π–ª–∞ –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏"""
    keys = OrderedDict()
    
    if not os.path.exists(file_path):
        print(f"‚õî –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {file_path}")
        return keys
        
    try:
        with open(file_path, 'r', encoding='utf-8') as f:
            lines = f.readlines()
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å—Ç—Ä–æ–∫–∏ –≤ –æ–±—Ä–∞—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
            for line in reversed(lines):
                line = line.strip()
                if not line or 'Èé∞' not in line:
                    continue
                    
                parts = line.split('Èé∞', 1)
                if len(parts) < 2:
                    continue
                    
                path, key = parts
                clean = clean_path(path)
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é —Å—Ç—Ä–æ–∫—É –∫–∞–∫ –∫–ª—é—á
                keys[f"{path}Èé∞{key}"] = (path, key, clean)
                
        print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –∫–ª—é—á–µ–π: {len(keys)}")
        return keys
    except Exception as e:
        print(f"‚õî –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞ {file_path}: {e}")
        return keys

def get_untranslated_keys(original_keys, russian_keys, checklist):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–æ–ª—å–∫–æ –Ω–µ–ø–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω—ã–µ –∫–ª—é—á–∏ —Å –æ–±—Ä–∞—Ç–Ω–æ–π –Ω—É–º–µ—Ä–∞—Ü–∏–µ–π"""
    untranslated = OrderedDict()
    
    # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –Ω–µ–ø–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω—ã–µ –∫–ª—é—á–∏
    all_untranslated = []
    for key_id, (path, key, clean) in original_keys.items():
        if clean not in russian_keys:
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –æ—Ç–º–µ—á–µ–Ω–Ω—ã–µ –∫–∞–∫ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω—ã–µ
            if checklist.get(key_id) == "‚úÖ":
                continue
            all_untranslated.append((path, key, key_id))
    
    # –ù—É–º–µ—Ä—É–µ–º –≤ –æ–±—Ä–∞—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ (–Ω–æ–≤—ã–µ –∫–ª—é—á–∏ –ø–æ–ª—É—á–∞—é—Ç –º–∞–ª–µ–Ω—å–∫–∏–µ –Ω–æ–º–µ—Ä–∞)
    for idx, (path, key, key_id) in enumerate(reversed(all_untranslated), 1):
        untranslated[idx] = {
            'path': path,
            'key': key,
            'id': key_id
        }
            
    return untranslated

def print_progress(current, total):
    """–ü–µ—á–∞—Ç–∞–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä"""
    if total == 0:
        print("\nüéâ –í—Å–µ –∫–ª—é—á–∏ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω—ã!")
        return
        
    bar_length = 30
    progress = current / total
    filled = int(bar_length * progress)
    bar = '‚ñà' * filled + '-' * (bar_length - filled)
    percent = progress * 100
    
    print(f"\n–ü—Ä–æ–≥—Ä–µ—Å—Å: [{bar}] {percent:.1f}% ({current}/{total})")
    print(f"–û—Å—Ç–∞–ª–æ—Å—å –ø–µ—Ä–µ–≤–µ—Å—Ç–∏: {total - current}\n")

def print_file_help(script_dir):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –ø–æ —Ä–∞–∑–º–µ—â–µ–Ω–∏—é —Ñ–∞–π–ª–æ–≤"""
    print("\n" + "‚ïê"*50)
    print("üìÇ –ò–ù–°–¢–†–£–ö–¶–ò–Ø –ü–û –†–ê–ó–ú–ï–©–ï–ù–ò–Æ –§–ê–ô–õ–û–í")
    print("‚ïê"*50)
    print(f"1. –ü–æ–º–µ—Å—Ç–∏—Ç–µ —Ñ–∞–π–ª—ã –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏ –≤ –ø–∞–ø–∫—É —Å–∫—Ä–∏–ø—Ç–∞:")
    print(f"   üìÅ {script_dir}")
    print("2. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ñ–∞–π–ª—ã –Ω–∞–∑—ã–≤–∞—é—Ç—Å—è:")
    print("   - original.txt - –∏—Å—Ö–æ–¥–Ω–∞—è –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∞–Ω–≥–ª–∏–π—Å–∫–∞—è)")
    print("   - russian.txt - —Ä—É—Å—Å–∫–∞—è –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏—è")
    print("3. –ò–ª–∏ —É–∫–∞–∂–∏—Ç–µ –ø—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ:")
    print("   python localization_checker.py --original –ø—É—Ç—å/–∫/original.txt --russian –ø—É—Ç—å/–∫/russian.txt")
    print("‚ïê"*50 + "\n")

def main():
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—É—Ç—å –∫ –ø–∞–ø–∫–µ —Å–∫—Ä–∏–ø—Ç–∞
    script_dir = get_script_directory()
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
    parser = argparse.ArgumentParser(description='–ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏')
    parser.add_argument('--original', default=os.path.join(script_dir, 'original.txt'), 
                        help='–§–∞–π–ª –∏—Å—Ö–æ–¥–Ω–æ–π –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏')
    parser.add_argument('--russian', default=os.path.join(script_dir, 'russian.txt'), 
                        help='–§–∞–π–ª —Ä—É—Å—Å–∫–æ–π –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏')
    parser.add_argument('--progress', default=os.path.join(script_dir, 'translation_progress.json'), 
                        help='–§–∞–π–ª –ø—Ä–æ–≥—Ä–µ—Å—Å–∞')
    args = parser.parse_args()

    # –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–∞—Ö
    print("\n" + "‚ïê"*50)
    print(f"üñ•  –¢–µ–∫—É—â–∏–π —Ä–∞–±–æ—á–∏–π –∫–∞—Ç–∞–ª–æ–≥: {os.getcwd()}")
    print(f"üìÇ –ü–∞–ø–∫–∞ —Å–∫—Ä–∏–ø—Ç–∞: {script_dir}")
    print(f"üîç –ò—Å—Ö–æ–¥–Ω–∞—è –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏—è: {args.original}")
    print(f"üîç –†—É—Å—Å–∫–∞—è –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏—è: {args.russian}")
    print(f"üìä –§–∞–π–ª –ø—Ä–æ–≥—Ä–µ—Å—Å–∞: {args.progress}")
    print("‚ïê"*50)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–æ–≤
    files_exist = True
    if not os.path.exists(args.original):
        print(f"\n‚õî –§–ê–ô–õ –ù–ï –ù–ê–ô–î–ï–ù: {args.original}")
        files_exist = False
    
    if not os.path.exists(args.russian):
        print(f"\n‚õî –§–ê–ô–õ –ù–ï –ù–ê–ô–î–ï–ù: {args.russian}")
        files_exist = False
    
    if not files_exist:
        print_file_help(script_dir)
        input("–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –≤—ã—Ö–æ–¥–∞...")
        return

    # –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
    print("\n‚è≥ –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–≥—Ä–µ—Å—Å–∞...")
    checklist = load_checklist(args.progress)
    
    # –ë—ã—Å—Ç—Ä–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –∫–ª—é—á–µ–π
    print("üîç –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤ –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏...")
    original_keys = parse_keys(args.original)
    russian_keys = parse_keys(args.russian)
    
    # –î–ª—è —Ä—É—Å—Å–∫–æ–π –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏ –Ω–∞–º –Ω—É–∂–Ω—ã —Ç–æ–ª—å–∫–æ "—á–∏—Å—Ç—ã–µ" –∫–ª—é—á–∏
    russian_clean_keys = {clean for _, (_, _, clean) in russian_keys.items()}
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –¥–∞–Ω–Ω—ã—Ö
    if not original_keys or not russian_keys:
        print("\n‚õî –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∞–π–ª—ã –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏.")
        print_file_help(script_dir)
        input("–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –≤—ã—Ö–æ–¥–∞...")
        return
        
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–ø–∏—Å–∫–∞ –∫–ª—é—á–µ–π
    untranslated = get_untranslated_keys(original_keys, russian_clean_keys, checklist)
    total_keys = len(untranslated)
    
    # –û—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ü–∏–∫–ª
    while True:
        os.system('cls' if os.name == 'nt' else 'clear')
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        print("‚ïê"*50)
        print(f"üîç –ü–†–û–í–ï–†–ö–ê –õ–û–ö–ê–õ–ò–ó–ê–¶–ò–ò | –§–∞–π–ª—ã: {os.path.basename(args.original)}, {os.path.basename(args.russian)}")
        print("‚ïê"*50)
        
        if total_keys == 0:
            print("\n\033[92müéâ –í–°–ï –ö–õ–Æ–ß–ò –ü–ï–†–ï–í–ï–î–ï–ù–´! –õ–û–ö–ê–õ–ò–ó–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê.\033[0m")
            save_checklist(args.progress, checklist)
            input("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –≤—ã—Ö–æ–¥–∞...")
            return
        
        # –°—Ç–∞—Ç—É—Å
        translated_count = sum(1 for data in untranslated.values() 
                             if checklist.get(data['id']) == "‚úÖ")
        print(f"\n\033[1müìã –ù–ï–ü–ï–†–ï–í–ï–î–ï–ù–ù–´–ï –ö–õ–Æ–ß–ò (–í—Å–µ–≥–æ: {total_keys}):\033[0m")
        print("(–ù–æ–≤—ã–µ –∫–ª—é—á–∏ –≤–≤–µ—Ä—Ö—É —Å –Ω–æ–º–µ—Ä–∞–º–∏ 1, 2, 3...)")
        
        # –í—ã–≤–æ–¥ –∫–ª—é—á–µ–π (–ø–µ—Ä–≤—ã–µ 30)
        print("\n\033[1m–ü–æ—Å–ª–µ–¥–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ –∫–ª—é—á–∏:\033[0m")
        for idx in list(untranslated.keys())[:30]:
            data = untranslated[idx]
            status = checklist.get(data['id'], "‚ùå")
            color = "\033[92m" if status == "‚úÖ" else "\033[91m"
            print(f"{color}{idx:4d}. [{status}] –ü—É—Ç—å: {data['path']}\n      –ö–ª—é—á: {data['key']}\033[0m")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        print_progress(translated_count, total_keys)
        
        # –ú–µ–Ω—é
        print("\033[1müîß –î–ï–ô–°–¢–í–ò–Ø:\033[0m")
        print("1-30. –û—Ç–º–µ—Ç–∏—Ç—å/—Å–Ω—è—Ç—å –æ—Ç–º–µ—Ç–∫—É –ø–æ –Ω–æ–º–µ—Ä—É –∫–ª—é—á–∞")
        print("S. –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å")
        print("R. –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∫–ª—é—á–µ–π")
        print("I. –ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–∞—Ö")
        print("Q. –í—ã—Ö–æ–¥")
        
        choice = input("\nüëâ –í–´–ë–ï–†–ò–¢–ï –î–ï–ô–°–¢–í–ò–ï: ").upper()
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–ª—é—á–∞ (1-30)
        if choice.isdigit():
            idx = int(choice)
            if idx in untranslated:
                data = untranslated[idx]
                current_status = checklist.get(data['id'], "‚ùå")
                new_status = "‚úÖ" if current_status == "‚ùå" else "‚ùå"
                checklist[data['id']] = new_status
                
                action = "–û–¢–ú–ï–ß–ï–ù –ö–ê–ö –ü–ï–†–ï–í–ï–î–Å–ù–ù–´–ô" if new_status == "‚úÖ" else "–°–ù–Ø–¢–ê –û–¢–ú–ï–¢–ö–ê –ü–ï–†–ï–í–û–î–ê"
                print(f"\nüîî –ö–õ–Æ–ß #{idx} {action}!")
            else:
                print(f"‚õî –ö–õ–Æ–ß –° –ù–û–ú–ï–†–û–ú {idx} –ù–ï –ù–ê–ô–î–ï–ù!")
            input("\n‚Üµ –ù–ê–ñ–ú–ò–¢–ï ENTER –î–õ–Ø –ü–†–û–î–û–õ–ñ–ï–ù–ò–Ø...")
        
        # –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å
        elif choice == 'S':
            if save_checklist(args.progress, checklist):
                print("\nüíæ –ü–†–û–ì–†–ï–°–° –°–û–•–†–ê–ù–Å–ù!")
            else:
                print("\n‚ö†Ô∏è –ù–ï –£–î–ê–õ–û–°–¨ –°–û–•–†–ê–ù–ò–¢–¨ –ü–†–û–ì–†–ï–°–°!")
            input("‚Üµ –ù–ê–ñ–ú–ò–¢–ï ENTER –î–õ–Ø –ü–†–û–î–û–õ–ñ–ï–ù–ò–Ø...")
        
        # –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∫–ª—é—á–µ–π
        elif choice == 'R':
            print("\nüîÑ –û–ë–ù–û–í–õ–ï–ù–ò–ï –°–ü–ò–°–ö–ê –ö–õ–Æ–ß–ï–ô...")
            original_keys = parse_keys(args.original)
            russian_keys = parse_keys(args.russian)
            russian_clean_keys = {clean for _, (_, _, clean) in russian_keys.items()}
            untranslated = get_untranslated_keys(original_keys, russian_clean_keys, checklist)
            total_keys = len(untranslated)
            print(f"‚úÖ –ó–ê–ì–†–£–ñ–ï–ù–û {total_keys} –ö–õ–Æ–ß–ï–ô")
            input("‚Üµ –ù–ê–ñ–ú–ò–¢–ï ENTER –î–õ–Ø –ü–†–û–î–û–õ–ñ–ï–ù–ò–Ø...")
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ñ–∞–π–ª–∞—Ö
        elif choice == 'I':
            print("\n" + "‚ïê"*50)
            print("üìÇ –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –§–ê–ô–õ–ê–•")
            print("‚ïê"*50)
            print(f"üñ•  –¢–µ–∫—É—â–∏–π —Ä–∞–±–æ—á–∏–π –∫–∞—Ç–∞–ª–æ–≥: {os.getcwd()}")
            print(f"üìÇ –ü–∞–ø–∫–∞ —Å–∫—Ä–∏–ø—Ç–∞: {script_dir}")
            print(f"üîç –ò—Å—Ö–æ–¥–Ω–∞—è –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏—è: {args.original}")
            print(f"üîç –†—É—Å—Å–∫–∞—è –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏—è: {args.russian}")
            print(f"üìä –§–∞–π–ª –ø—Ä–æ–≥—Ä–µ—Å—Å–∞: {args.progress}")
            print(f"üìù –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –ø—É—Ç–µ–π –∏ –Ω–∞–∑–≤–∞–Ω–∏–π —Ñ–∞–π–ª–æ–≤")
            print("‚ïê"*50)
            input("\n‚Üµ –ù–ê–ñ–ú–ò–¢–ï ENTER –î–õ–Ø –ü–†–û–î–û–õ–ñ–ï–ù–ò–Ø...")
        
        # –í—ã—Ö–æ–¥
        elif choice == 'Q':
            print("\nüëã –í–´–•–û–î –ò–ó –ü–†–û–ì–†–ê–ú–ú–´")
            break
        
        else:
            print("‚õî –ù–ï–í–ï–†–ù–´–ô –í–´–ë–û–†. –ü–û–ü–†–û–ë–£–ô–¢–ï –°–ù–û–í–ê.")
            input("‚Üµ –ù–ê–ñ–ú–ò–¢–ï ENTER –î–õ–Ø –ü–†–û–î–û–õ–ñ–ï–ù–ò–Ø...")

if __name__ == "__main__":
    main()